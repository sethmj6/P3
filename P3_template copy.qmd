---
title: "Client Report - Late Flights & Missing Data (JSON)"
subtitle: "Course DS 250"
author: "Seth Johnson"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---

```{python}
import pandas as pd
import numpy as np
from lets_plot import *

LetsPlot.setup_html(isolated_frame=True)
```


```{python}
# Learn morea about Code Cells: https://quarto.org/docs/reference/cells/cells-jupyter.html

# Include and execute your code here
df = pd.read_json("https://github.com/byuidatascience/data4missing/raw/master/data-raw/flights_missing/flights_missing.json")
```

## Elevator pitch
_This project analyzes flight delay patterns, focusing on late arrivals and missing data. By cleaning and structuring the dataset, we identify trends in airport performance, seasonal delay patterns, and the impact of missing data. Our insights help travelers and airlines optimize scheduling and improve reliability._


## QUESTION|TASK 1

__Fix all of the varied missing data types in the data to be consistent (all missing values should be displayed as “NaN”).__ In your report include one record example (one row) from your new data, in the raw JSON format. Your example should display the "NaN" for at least one missing value.__  

_To ensure data consistency, all missing values were standardized to "NaN." This uniformity allows for easier analysis and prevents skewed calculations. Below is an example of a transformed record:_

```{python}
# Include and execute your code here
import pandas as pd
import numpy as np

# Load the dataset
url = "https://github.com/byuidatascience/data4missing/raw/master/data-raw/flights_missing/flights_missing.json"
df = pd.read_json(url)

# Standardize all missing values as NaN
df.replace(["", "null", "NULL", "None", None, pd.NaT], np.nan, inplace=True)

# Extract one row where at least one value is NaN
sample_row = df[df.isnull().any(axis=1)].iloc[[0]]  # Double brackets to keep DataFrame format

# Display the extracted row
sample_row


```



## QUESTION|TASK 2

__Which airport has the worst delays?__ Describe the metric you chose, and why you chose it to determine the “worst” airport. Your answer should include a summary table that lists (for each airport) the total number of flights, total number of delayed flights, proportion of delayed flights, and average delay time in hours.   

_To determine the "worst" airport for delays, we used proportion of delayed flights and average delay time in hours as key metrics. The results show that Chicago O'Hare International (ORD) had the highest percentage of delays and the longest average delay time._

```{python}
# Include and execute your code here
import pandas as pd
import numpy as np

# Load the dataset
url = "https://github.com/byuidatascience/data4missing/raw/master/data-raw/flights_missing/flights_missing.json"
df = pd.read_json(url)

# Standardize missing values as NaN
df.replace(["", "null", "NULL", "None", None, pd.NaT], np.nan, inplace=True)

# Convert relevant columns to numeric, forcing errors to NaN
cols_to_numeric = [
    "num_of_flights_total", "num_of_delays_total",
    "minutes_delayed_total"
]
df[cols_to_numeric] = df[cols_to_numeric].apply(pd.to_numeric, errors="coerce")

# Group by airport and calculate summary metrics
summary = df.groupby("airport_code").agg(
    total_flights=("num_of_flights_total", "sum"),
    total_delayed_flights=("num_of_delays_total", "sum"),
    avg_delay_time_hours=("minutes_delayed_total", lambda x: x.sum() / 60),  # Convert minutes to hours
)

# Calculate proportion of delayed flights
summary["proportion_delayed"] = summary["total_delayed_flights"] / summary["total_flights"]

# Drop airports with missing data
summary.dropna(inplace=True)

# Identify the top 10 worst airports based on the highest average delay time
worst_airports = summary.sort_values(by="avg_delay_time_hours", ascending=False).head(10)

# Display the summary table with the top 10 worst airports
worst_airports





```


## QUESTION|TASK 3

__What is the best month to fly if you want to avoid delays of any length?__ Describe the metric you chose and why you chose it to calculate your answer. Include one chart to help support your answer, with the x-axis ordered by month. (To answer this question, you will need to remove any rows that are missing the `Month` variable.)  

_We calculated the monthly average delay time and percentage of delayed flights to determine the best month for on-time travel. The data indicates that April has the lowest delay occurrences and average delay time._

```{python}
# Include and execute your code here
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Load the dataset
url = "https://github.com/byuidatascience/data4missing/raw/master/data-raw/flights_missing/flights_missing.json"
df = pd.read_json(url)

# Standardize missing values as NaN
df.replace(["", "null", "NULL", "None", None, pd.NaT], np.nan, inplace=True)

# Remove rows where 'month' is missing
df = df.dropna(subset=["month"])

# Convert relevant columns to numeric, forcing errors to NaN
cols_to_numeric = ["num_of_flights_total", "num_of_delays_total", "minutes_delayed_total"]
df[cols_to_numeric] = df[cols_to_numeric].apply(pd.to_numeric, errors="coerce")

# Aggregate delay metrics by month
summary = df.groupby("month").agg(
    total_flights=("num_of_flights_total", "sum"),
    total_delayed_flights=("num_of_delays_total", "sum"),
    avg_delay_time_minutes=("minutes_delayed_total", lambda x: x.sum() / x.count()),  # Avoid division by 0
)

# Calculate proportion of delayed flights
summary["proportion_delayed"] = summary["total_delayed_flights"] / summary["total_flights"]

# Drop missing values
summary.dropna(inplace=True)

# Define month order for plotting
month_order = [
    "January", "February", "March", "April", "May", "June",
    "July", "August", "September", "October", "November", "December"
]

# Reorder index to match correct month order
summary = summary.reindex(month_order)

# Identify the best month to fly (lowest proportion of delays)
best_month = summary["proportion_delayed"].idxmin()

# Plot delays by month
plt.figure(figsize=(10, 5))
plt.bar(summary.index, summary["proportion_delayed"], color="skyblue")
plt.xlabel("Month")
plt.ylabel("Proportion of Delayed Flights")
plt.title("Proportion of Delayed Flights by Month")
plt.xticks(rotation=45)
plt.show()

# Display summary table and best month
summary



```


## QUESTION|TASK 4

According to the BTS website, the “Weather” category only accounts for severe weather delays. Mild weather delays are not counted in the “Weather” category, but are actually included in both the “NAS” and “Late-Arriving Aircraft” categories. __Your job is to create a new column that calculates the total number of flights delayed by weather (both severe and mild).__ You will need to replace all the missing values in the Late Aircraft variable with the mean. Show your work by printing the first 5 rows of data in a table. Use these three rules for your calculations:  

    a. 100% of delayed flights in the Weather category are due to weather  
    a. 30% of all delayed flights in the Late-Arriving category are due to weather  
    a. From April to August, 40% of delayed flights in the NAS category are due to weather. The rest of the months, the proportion rises to 65%    

_As expected, most of the flights that are delated due to whether occur in January or February. _

```{python}
# Include and execute your code here

import pandas as pd
import numpy as np

# Load the dataset
url = "https://github.com/byuidatascience/data4missing/raw/master/data-raw/flights_missing/flights_missing.json"
df = pd.read_json(url)

# Standardize missing values as NaN
df.replace(["", "null", "NULL", "None", None, pd.NaT], np.nan, inplace=True)

# Convert relevant columns to numeric, forcing errors to NaN
cols_to_numeric = [
    "num_of_delays_weather", "num_of_delays_nas", "num_of_delays_late_aircraft"
]
df[cols_to_numeric] = df[cols_to_numeric].apply(pd.to_numeric, errors="coerce")

# Replace missing values in 'num_of_delays_late_aircraft' with the column mean
df["num_of_delays_late_aircraft"].fillna(df["num_of_delays_late_aircraft"].mean(), inplace=True)

# Calculate total weather-related delays:
df["total_weather_delays"] = df["num_of_delays_weather"] + df["num_of_delays_nas"] + df["num_of_delays_late_aircraft"]

# Show first 5 rows
df.head()


```


```{python}
# Include and execute your code here
import pandas as pd
import numpy as np

# Load the dataset
url = "https://github.com/byuidatascience/data4missing/raw/master/data-raw/flights_missing/flights_missing.json"
df = pd.read_json(url)

# Standardize missing values as NaN
df.replace(["", "null", "NULL", "None", None, pd.NaT], np.nan, inplace=True)

# Convert relevant columns to numeric, forcing errors to NaN
cols_to_numeric = [
    "num_of_delays_weather", "num_of_delays_nas", "num_of_delays_late_aircraft"
]
df[cols_to_numeric] = df[cols_to_numeric].apply(pd.to_numeric, errors="coerce")

# Replace missing values in 'num_of_delays_late_aircraft' with the column mean
df["num_of_delays_late_aircraft"].fillna(df["num_of_delays_late_aircraft"].mean(), inplace=True)

# Calculate total weather-related delays (30% of late-arriving aircraft delays count)
df["total_weather_delays"] = df["num_of_delays_weather"] + df["num_of_delays_nas"] + (0.3 * df["num_of_delays_late_aircraft"])

# Show first 5 rows
df.head()

```


```{python}
# Include and execute your code here
import pandas as pd
import numpy as np

# Load the dataset
url = "https://github.com/byuidatascience/data4missing/raw/master/data-raw/flights_missing/flights_missing.json"
df = pd.read_json(url)

# Standardize missing values as NaN
df.replace(["", "null", "NULL", "None", None, pd.NaT], np.nan, inplace=True)

# Convert relevant columns to numeric, forcing errors to NaN
cols_to_numeric = [
    "num_of_delays_weather", "num_of_delays_nas", "num_of_delays_late_aircraft"
]
df[cols_to_numeric] = df[cols_to_numeric].apply(pd.to_numeric, errors="coerce")

# Replace missing values in 'num_of_delays_late_aircraft' with the column mean
df["num_of_delays_late_aircraft"].fillna(df["num_of_delays_late_aircraft"].mean(), inplace=True)

# Define NAS weather contribution based on the month
spring_summer_months = ["April", "May", "June", "July", "August"]
df["nas_weather_percentage"] = df["month"].apply(lambda x: 0.4 if x in spring_summer_months else 0.65)

# Calculate total weather-related delays
df["total_weather_delays"] = (
    df["num_of_delays_weather"] +
    (df["nas_weather_percentage"] * df["num_of_delays_nas"]) +
    (0.3 * df["num_of_delays_late_aircraft"])
)

# Show first 5 rows
df.head()


```


## QUESTION|TASK 5

__Using the new weather variable calculated above, create a barplot showing the proportion of all flights that are delayed by weather at each airport. Describe what you learn from this graph.__  

_The weather-related flight delays across different airports reveals that San Francisco International Airport (SFO) has the highest proportion of delays due to weather, with nearly 10% of flights affected. Chicago O'Hare (ORD) and Atlanta (ATL) follow, though with slightly lower proportions, indicating that major hubs in diverse climates still experience significant disruptions. Interestingly, Salt Lake City (SLC) has the lowest proportion of weather-related delays, suggesting either more favorable weather conditions or operational resilience. The data highlights how weather impacts airports differently, likely due to geographic and seasonal variations. These insights can be valuable for airlines and travelers in anticipating and managing weather-related disruptions._
```{python}

# Include and execute your code here

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Ensure Seaborn is installed before importing
try:
    import seaborn as sns
except ModuleNotFoundError:
    import sys
    !{sys.executable} -m pip install seaborn
    import seaborn as sns  # Import again after installation

# Load the dataset
url = "https://github.com/byuidatascience/data4missing/raw/master/data-raw/flights_missing/flights_missing.json"
df = pd.read_json(url)

# Standardize missing values as NaN
df.replace(["", "null", "NULL", "None", None, pd.NaT], np.nan, inplace=True)

# Convert relevant columns to numeric
cols_to_numeric = [
    "num_of_flights_total", "num_of_delays_weather",
    "num_of_delays_nas", "num_of_delays_late_aircraft"
]
df[cols_to_numeric] = df[cols_to_numeric].apply(pd.to_numeric, errors="coerce")

# Replace missing values in 'num_of_delays_late_aircraft' with the column mean
df["num_of_delays_late_aircraft"].fillna(df["num_of_delays_late_aircraft"].mean(), inplace=True)

# Define NAS weather contribution based on the month
spring_summer_months = ["April", "May", "June", "July", "August"]
df["nas_weather_percentage"] = df["month"].apply(lambda x: 0.4 if x in spring_summer_months else 0.65)

# Calculate total weather-related delays
df["total_weather_delays"] = (
    df["num_of_delays_weather"] +
    (df["nas_weather_percentage"] * df["num_of_delays_nas"]) +
    (0.3 * df["num_of_delays_late_aircraft"])
)

# Ensure relevant columns are numeric
df["num_of_flights_total"] = pd.to_numeric(df["num_of_flights_total"], errors="coerce")

# Group data by airport and compute weather delay proportion
weather_summary = df.groupby("airport_code").agg(
    total_flights=("num_of_flights_total", "sum"),
    total_weather_delays=("total_weather_delays", "sum")
)

# Calculate proportion of flights delayed by weather
weather_summary["weather_delay_proportion"] = weather_summary["total_weather_delays"] / weather_summary["total_flights"]

# Drop airports with missing values
weather_summary.dropna(inplace=True)

# Sort airports by highest weather delay proportion
weather_summary = weather_summary.sort_values(by="weather_delay_proportion", ascending=False)

# Plot the bar chart
plt.figure(figsize=(12, 6))
sns.barplot(
    x=weather_summary.index,
    y=weather_summary["weather_delay_proportion"],
    palette="Blues_r"
)

# Customize labels and title
plt.xlabel("Airport Code")
plt.ylabel("Proportion of Flights Delayed by Weather")
plt.title("Proportion of Weather-Related Delays by Airport")
plt.xticks(rotation=45)
plt.show()

# Display the summary table
weather_summary



```


---


## STRETCH QUESTION|TASK 1

__Which delay is the worst delay?__ Create a similar analysis as above for Weahter Delay with: Carrier Delay and Security Delay. Compare the proportion of delay for each of the three categories in a Chart and a Table. Describe your results.

_Weather delays are the most significant across all airports, especially at SFO and ORD. Carrier delays are lower but notable, with SAN having the highest proportion. Security delays are minimal everywhere. Overall, weather remains the dominant cause of disruptions, particularly in major hubs._

```{python}
# Include and execute your code here

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Ensure Seaborn is installed before importing
try:
    import seaborn as sns
except ModuleNotFoundError:
    import sys
    !{sys.executable} -m pip install seaborn
    import seaborn as sns

# Load the dataset
url = "https://github.com/byuidatascience/data4missing/raw/master/data-raw/flights_missing/flights_missing.json"
df = pd.read_json(url)

# Standardize missing values as NaN
df.replace(["", "null", "NULL", "None", None, pd.NaT], np.nan, inplace=True)

# Convert relevant columns to numeric
cols_to_numeric = [
    "num_of_flights_total", "num_of_delays_weather", "num_of_delays_nas", 
    "num_of_delays_late_aircraft", "num_of_delays_carrier", "num_of_delays_security"
]
df[cols_to_numeric] = df[cols_to_numeric].apply(pd.to_numeric, errors="coerce")

# Replace missing values in 'num_of_delays_late_aircraft' with the column mean
df["num_of_delays_late_aircraft"].fillna(df["num_of_delays_late_aircraft"].mean(), inplace=True)

# Define NAS weather contribution based on the month
spring_summer_months = ["April", "May", "June", "July", "August"]
df["nas_weather_percentage"] = df["month"].apply(lambda x: 0.4 if x in spring_summer_months else 0.65)

# Calculate total weather-related delays
df["total_weather_delays"] = (
    df["num_of_delays_weather"] +
    (df["nas_weather_percentage"] * df["num_of_delays_nas"]) +
    (0.3 * df["num_of_delays_late_aircraft"])
)

# Ensure relevant columns are numeric
df["num_of_flights_total"] = pd.to_numeric(df["num_of_flights_total"], errors="coerce")

# Group data by airport and compute delay proportions
delay_summary = df.groupby("airport_code").agg(
    total_flights=("num_of_flights_total", "sum"),
    total_weather_delays=("total_weather_delays", "sum"),
    total_carrier_delays=("num_of_delays_carrier", "sum"),
    total_security_delays=("num_of_delays_security", "sum")
)

# Calculate proportions
delay_summary["weather_delay_proportion"] = delay_summary["total_weather_delays"] / delay_summary["total_flights"]
delay_summary["carrier_delay_proportion"] = delay_summary["total_carrier_delays"] / delay_summary["total_flights"]
delay_summary["security_delay_proportion"] = delay_summary["total_security_delays"] / delay_summary["total_flights"]

# Drop airports with missing values
delay_summary.dropna(inplace=True)

# Sort by highest weather delay proportion
delay_summary = delay_summary.sort_values(by="weather_delay_proportion", ascending=False)

# Reshape data for plotting
delay_melted = delay_summary[["weather_delay_proportion", "carrier_delay_proportion", "security_delay_proportion"]]
delay_melted = delay_melted.reset_index().melt(id_vars=["airport_code"], var_name="Delay Type", value_name="Proportion")

# Plot comparison of delay types
plt.figure(figsize=(12, 6))
sns.barplot(
    x="airport_code",
    y="Proportion",
    hue="Delay Type",
    data=delay_melted,
    palette="coolwarm"
)

# Customize labels and title
plt.xlabel("Airport Code")
plt.ylabel("Proportion of Total Flights Delayed")
plt.title("Comparison of Weather, Carrier, and Security Delays by Airport")
plt.xticks(rotation=45)
plt.legend(title="Delay Type")
plt.show()

# Display the summary table
delay_summary[["weather_delay_proportion", "carrier_delay_proportion", "security_delay_proportion"]]



```

---

